name: 'deploy: backend'

on:
  push:
    branches:
      - 'main'
      - 'dev/*'
    paths:
      - '.github/workflows/deploy-backend.yaml'
      - 'apps/backend/**'
  workflow_dispatch:

env:
  IMAGE: ghcr.io/${{ github.repository }}/teambackend:${{ github.sha }}

defaults:
  run:
    working-directory: apps/backend

jobs:
  build:
    name: Backend - build and push docker
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - name: Build and package
        run: mvn package --batch-mode -Dmaven.test.skip=true
      - name: Extract jar
        run: cd apps/backend/target && java -Djarmode=tools -jar target/app.jar extract
      - name: Build and push Docker container
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: org
          docker_context: apps/backend/
          build_args: JAR_PATH=target/app/app.jar LIB_PATH=target/app/lib
          dockerfile: apps/backend/Dockerfile_distroless
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          salsa: false
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
      telemetry: ${{ steps.docker-build-push.outputs.telemetry }}
      digest: ${{ steps.docker-build-push.outputs.digest }}



  test:
    name: Backend - run tests
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
      - name: Build
        run: mvn test --batch-mode

  sbom:
    name: Generate SBOM, attest and sign image
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      id-token: "write"
    steps:
      - name: NAIS login
        uses: nais/login@v0
        id: login
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: org
      - name: Generate SBOM, attest and sign image
        id: attest-sign
        uses: nais/attest-sign@v1
        with:
          image_ref: ${{needs.build.outputs.image}}@${{ needs.build.outputs.digest }}

  deploy-preprod:
    name: Backend - deploy Dev GCP
    needs:
      - build
      - test
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        name: deploy unleash token for backend (dev)
        env:
          CLUSTER: dev-gcp
          RESOURCE: apps/backend/nais/backend-unleash.yaml
          VAR: env=development
      - uses: nais/deploy/actions/deploy@v2
        name: deploy backend application (dev)
        env:
          CLUSTER: dev-gcp
          RESOURCE: apps/backend/nais/backend-dev-gcp.yaml
          VAR: image=${{needs.build.outputs.image}}
          
  deploy-prod:
    name: Backend - deploy Prod GCP
    needs:
      - build
      - test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        name: deploy unleash token for backend (prod)
        env:
          CLUSTER: prod-gcp
          RESOURCE: apps/backend/nais/backend-unleash.yaml
          VAR: env=production
      - uses: nais/deploy/actions/deploy@v2
        name: deploy backend application (prod)
        env:
          CLUSTER: prod-gcp
          RESOURCE: apps/backend/nais/backend-prod-gcp.yaml
          VAR: image=${{ needs.build.outputs.image }}
