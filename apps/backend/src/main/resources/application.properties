server.port=8080
server.error.include-message=always
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=20s
spring.main.cloud-platform=kubernetes

springdoc.packages-to-scan=no.nav.data
springdoc.paths-to-exclude=/error, /internal/**
springdoc.api-docs.path=/swagger-docs
springdoc.swagger-ui.path=/api

# DATABASE
spring.datasource.url=jdbc:postgresql://localhost:5412/postgres
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.open-in-view=false
vault.enable=true
vault.database-backend=postgresql/${ENVIRONMENT_CLASS}-fss
vault.database-role=team-catalog-user
vault.database-adminrole=team-catalog-admin

# FLYWAY
spring.flyway.schemas=public
spring.flyway.baseline-on-migrate=true

management.endpoints.web.base-path=/internal
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.web.path-mapping.prometheus=metrics
management.endpoint.health.show-details=always
management.endpoint.security.enabled=false
management.endpoint.metrics.enabled=false
management.endpoint.prometheus.enabled=true
management.info.git.mode=simple
management.metrics.export.prometheus.enabled=true

# Security
azure.activedirectory.client-id=${AZURE_APP_CLIENT_ID:client-id}
azure.activedirectory.client-secret=${AZURE_APP_CLIENT_SECRET:client-secret}
azure.activedirectory.well-known=${AZURE_APP_WELL_KNOWN_URL:https://login.microsoftonline.com/62366534-1ec3-4962-8869-9b5535279d0b/v2.0/.well-known/openid-configuration}
azure.activedirectory.allowed-app-id-mappings=${AZURE_APP_PRE_AUTHORIZED_APPS:[{"clientId":"appId","name":"thisapp"},{"clientId":"appId2","name":"otherapp"}]}
azure.activedirectory.mail-user=${AZURE_APP_MAIL_USER:mail-user}
azure.activedirectory.mail-password=${AZURE_APP_MAIL_PASSWORD:mail-password}

team-catalog.security.enc-key=${AZURE_TOKEN_ENC_KEY:tokenkey}
team-catalog.security.write-groups=${AZURE_CLIENT_GROUPS:nom}
team-catalog.security.admin-groups=${AZURE_CLIENT_GROUPS_ADMIN:nom}
team-catalog.security.redirectUris=http://localhost:3000
team-catalog.security.env=${NAIS_CLUSTER_NAME:local}
team-catalog.security.dev-email-allow-list=${DEV_EMAIL_ALLOW_LIST:}

# Team-Cat
team-catalog.defaultProductareaUuid= ${DEFAULT_PRODUCTAREA_UUID}

# Nora
client.team-nora.enable=false
client.team-nora.url=https://nora/api
client.team-nora.teams-url=${client.team-nora.url}/teams
client.team-nora.apps-url=${client.team-nora.url}/apps/{nick}
client.team-nora.team-url=${client.team-nora.url}/teams/{nick}

# Nais Console
client.nais.console.enabled=true
client.nais.console.base-url=https://console.nav.cloud.nais.io/query
client.nais.console.auth.token=${NAIS_CONSOLE_TOKEN}

# Behandlingskatalog
client.process-cat.base-url=https://something

# NOM
client.nom.graphql.url=https://nom/graphql

# Slack api
client.slack.base-url=https://slack.com/api
client.slack.token=${SLACK_TOKEN:token}


kafka.topics.nom-ressurs=org.nom-ressurser

spring.kafka.bootstrap-servers=${KAFKA_BROKERS}
spring.kafka.security.protocol=SSL
spring.kafka.ssl.key-store-type=PKCS12
spring.kafka.ssl.key-store-location=file:${KAFKA_KEYSTORE_PATH}
spring.kafka.ssl.key-store-password=${KAFKA_CREDSTORE_PASSWORD}
spring.kafka.ssl.trust-store-location=file:${KAFKA_TRUSTSTORE_PATH}
spring.kafka.ssl.trust-store-password=${KAFKA_CREDSTORE_PASSWORD}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.max-poll-records=100
spring.kafka.consumer.group-id=teamcat
